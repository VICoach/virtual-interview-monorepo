// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  USER
  ADMIN
}

model User {
  user_id            Int                      @id @default(autoincrement())
  username           String                   @unique
  first_name         String?
  last_name          String?
  email              String                   @unique
  password           String?
  provider           Provider?                @relation(fields: [provider_id], references: [provider_id])
  provider_id        String?
  accountType        AccountType[]            @default([USER])
  email_confirmed    Boolean                  @default(false)
  verify_token       String?
  reset_pass_token   String?
  refresh_token      String?
  access_token       String?
  profile            Profile?
  interviewSessions  InterviewSession[]
  performanceMetrics PerformanceMetric[]
}

model Provider {
  provider_id String     @id @default(uuid())
  type        ProviderType

  User User[]
}

enum ProviderType {
  GOOGLE
}

enum InterviewMode {
  TECHNICAL
  MOCK_UP
  QUESTION_BY_QUESTION
}
model InterviewConfiguration {
  config_id          Int               @id @default(autoincrement())
  interview_mode     InterviewMode
  duration           Int
  language           String
  interviewSession   InterviewSession?
}

model InterviewSession {
  session_id         Int                    @id @default(autoincrement())
  config_id          Int                    @unique
  user_id            Int                    @unique   
  start_time         DateTime
  end_time           DateTime?
  user               User                   @relation(fields: [user_id], references: [user_id])
  config             InterviewConfiguration @relation(fields: [config_id], references: [config_id])
  performanceMetrics PerformanceMetric[]
}

model TechnicalProblem {
  problem_id            Int                 @id @default(autoincrement())
  title                 String
  time_limit            String
  memory_limit          String
  description           String
  input_specification   String
  output_specification  String
  difficulty            String
  tags                  String[]
  input                 String
  output                String
  solution              TechnicalSolution?
  testCases             TestCase[]
}

model TechnicalSolution {
  solution_id           Int              @id @default(autoincrement())
  problem_id            Int              @unique
  solution_description  String
  solution_code         String
  problem               TechnicalProblem @relation(fields: [problem_id], references: [problem_id])
}

model TestCase {
  test_case_id    Int              @id @default(autoincrement())
  problem_id      Int
  input           String
  expected_output String
  problem         TechnicalProblem @relation(fields: [problem_id], references: [problem_id])
}

// model SessionTechnicalProblem {
//   session_id    Int              @map("session_id")
//   problem_id    Int              @map("problem_id")
//   session       InterviewSession @relation(fields: [session_id], references: [session_id])
//   problem       TechnicalProblem @relation(fields: [problem_id], references: [problem_id])
//   assigned_at   DateTime         @default(now())

//   @@id([session_id, problem_id])
//   @@map("session_technical_problems")
// }

model PerformanceMetric {
  metric_id    Int              @id @default(autoincrement())
  user_id      Int
  session_id   Int
  metric_name  String
  metric_value Float
  recorded_at  DateTime         @default(now())
  user         User             @relation(fields: [user_id], references: [user_id])
  session      InterviewSession @relation(fields: [session_id], references: [session_id])
}

model Profile {
  profile_id Int      @id @default(autoincrement())
  user_id    Int      @unique
  education  String
  skills     String[]
  languages  String[]
  user       User     @relation(fields: [user_id], references: [user_id])
}


// model Question {
//   question_id      Int              @id @default(autoincrement())
//   session_id       Int
//   category         String
//   question         String
//   is_bank_question Boolean          @default(false)
//   session          InterviewSession @relation(fields: [session_id], references: [session_id])
//   answer           Answer?
// }

// model QuestionBank {
//   question_bank_id Int    @id @default(autoincrement())
//   category         String
//   question         String
// }

// model Answer {
//   answer_id    Int              @id @default(autoincrement())
//   session_id   Int
//   question_id  Int              @unique
//   user_answer  String
//   submitted_at DateTime         @default(now())
//   session      InterviewSession @relation(fields: [session_id], references: [session_id])
//   question     Question         @relation(fields: [question_id], references: [question_id])
//   feedback     Feedback?
// }

// model Feedback {
//   feedback_id Int    @id @default(autoincrement())
//   answer_id   Int    @unique
//   feedback    String
//   score       Int
//   answer      Answer @relation(fields: [answer_id], references: [answer_id])
// }